pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  dockerRegistryServiceConnection: '8a5f7ee5-d382-44a1-90fc-42f5eeb90f29'
  imageRepository: 'workplanner'
  containerRegistry: 'webappsregistryal.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  imagePullSecret: 'webappsregistryal2090a0db-auth'

stages:
- stage: Build
  displayName: Build stage
  jobs:
    - job: build
      steps:
      - task: UseDotNet@2
        displayName: 'Download SDK 5.0'
        inputs:
          version: '5.0.x'
          includePreviewVersions: true

      - task: UseDotNet@2
        displayName: 'Download SDK 3.1'
        inputs:
          version: '3.1.x'

      - task: gitversion/setup@0
        displayName: 'Setup GitVersion'
        inputs:
          versionSpec: '5.x'
          includePrerelease: true
      - task: gitversion/execute@0
        displayName: 'Execute GitVersion'

      - task: DotNetCoreCLI@2
        displayName: 'Build'
        inputs:
          command: 'build'
          arguments: '--configuration $(buildConfiguration)'
          versioningScheme: byEnvVar
          versionEnvVar: 'GitVersion.SemVer'

      - task: DotNetCoreCLI@2
        displayName: 'Test'
        inputs:
          command: test
          arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
          publishTestResults: true

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

      - task: DotNetCoreCLI@2
        displayName: 'Publish'
        inputs:
          command: publish
          publishWebProjects: True
          arguments: '--configuration $(buildConfiguration) --no-build --output $(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifacts'
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'WorkPlanner'

- stage: Build_image
  displayName: Build image stage
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(Build.BuildNumber)

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifactName: 'manifests'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build_image

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'ArturLaskowskiWorkPlanner.workplanner'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/s/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/s/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(Build.BuildNumber)